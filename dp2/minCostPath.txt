import java.util.*;
public class Solution {

	public static int minCostPath(int[][] input) {
		//Your code goes here
		int m=input.length;
		int n=input[0].length;
		int dp[][]=new int[m][n];


			for(int i=0; i<m; i++){
				for(int j=0; j<n; j++){

					if(i==0 && j==0)
					dp[i][j]=input[i][j];
					else{


				int up=0;
			if(i>0)
				up+=dp[i-1][j];
				else
				up+=Integer.MAX_VALUE;
				int left=0;
			if(j>0)
					left+= dp[i][j-1];
					else
					left+=Integer.MAX_VALUE;

				int diagonal= 0;
				if(i>0 && j>0)
				diagonal+=dp[i-1][ j-1];
				else
				diagonal+=Integer.MAX_VALUE;

				 dp[i][j]=input[i][j]+Math.min( up, Math.min( left, diagonal ) );
			
					}
			}
				}
				return dp[m-1][n-1]; 
	}
}

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class minCostPath {

    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    public static int[][] take2DInput() throws IOException {
        String[] strRowsCols = br.readLine().trim().split("\\s");
        int mRows = Integer.parseInt(strRowsCols[0]);
        int nCols = Integer.parseInt(strRowsCols[1]);

        if (mRows == 0) {
            return new int[0][0];
        }


        int[][] mat = new int[mRows][nCols];

        for (int row = 0; row < mRows; row++) {
            String[] strNums; 
            strNums = br.readLine().trim().split("\\s");
            
            for (int col = 0; col < nCols; col++) {
                mat[row][col] = Integer.parseInt(strNums[col]);
            }
        }

        return mat;
    }


    public static void main(String[] args) throws NumberFormatException, IOException {
        int[][] mat = take2DInput();
        System.out.println(Solution.minCostPath(mat));
    }
}